name: Frontend Foundation CI

on:
  pull_request:
    branches:
      - main
      - develop
      - 'feature/**'
  workflow_dispatch: {}

env:
  PNPM_VERSION: 9.12.2
  NODE_VERSION: 20.17.0

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validar tags @SC-00x no PR
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          PR_TITLE=$(jq -r '.pull_request.title' "$GITHUB_EVENT_PATH")
          PR_BODY=$(jq -r '.pull_request.body // \"\"' "$GITHUB_EVENT_PATH")
          if ! printf '%s\n%s\n' "$PR_TITLE" "$PR_BODY" | grep -Eq '@SC-00[1-5]'; then
            echo 'PR precisa mencionar pelo menos uma tag @SC-00x (SC-001..SC-005).'
            exit 1
          fi

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: ESLint (FSD boundaries + Zustand guard)
        run: pnpm lint

  test:
    name: Vitest
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Vitest (coverage gate)
        run: pnpm test:coverage

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry==2.2.1

      - name: Install Python dependencies
        run: poetry install --with dev

      - name: Pytest (coverage gate)
        run: poetry run pytest

      - name: Radon complexity gate
        run: poetry run python scripts/ci/check_python_complexity.py

  contracts:
    name: Contracts (Spectral, OpenAPI Diff, Pact)
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Spectral lint (US1/US2/US3)
        run: pnpm openapi:lint

      - name: OpenAPI diff foundation spec
        run: pnpm openapi:diff

      - name: Pact consumer verification (US1/US2/US3)
        run: pnpm pact:verify

  visual-accessibility:
    name: Visual & Accessibility Gates
    runs-on: ubuntu-latest
    needs: contracts
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Storybook estático
        run: pnpm --filter @iabank/frontend-foundation storybook:build

      - name: Instalar navegadores Playwright
        run: pnpm --filter @iabank/frontend-foundation exec playwright install --with-deps

      - name: Executar Chromatic
        env:
          CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
        run: |
          pnpm chromatic:ci
        working-directory: frontend

      - name: Validar cobertura visual por tenant
        env:
          CHROMATIC_MIN_COVERAGE: '95'
        run: |
          pnpm chromatic:check -- --output chromatic-coverage.json
        working-directory: frontend

      - name: Executar test-runner do Storybook (axe/WCAG)
        run: pnpm --filter @iabank/frontend-foundation storybook:test

      - name: Publicar artefatos Chromatic
        uses: actions/upload-artifact@v4
        with:
          name: chromatic-coverage
          path: |
            frontend/storybook-static
            frontend/chromatic-coverage.json

  performance:
    name: Performance Budgets
    runs-on: ubuntu-latest
    needs: contracts
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Setup k6
        uses: grafana/setup-k6-action@v0.2.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Preparar artefatos de performance
        run: mkdir -p artifacts

      - name: Executar k6 smoke
        run: pnpm perf:smoke:ci
        env:
          FOUNDATION_PERF_BASE_URL: https://example.com
          FOUNDATION_PERF_TENANT: tenant-alfa
          FOUNDATION_PERF_VUS: 1
          FOUNDATION_PERF_DURATION: 10s

      - name: Publicar resultados k6
        uses: actions/upload-artifact@v4
        with:
          name: performance-k6-smoke
          path: artifacts/k6-smoke.json

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: contracts
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Instalar dependências Python de segurança
        run: pip install --upgrade pip && pip install -r requirements-dev.txt bandit

      - name: SAST (Bandit)
        run: scripts/security/run_sast.sh

      - name: DAST/Segurança dinâmica
        run: scripts/security/run_dast.sh

      - name: Validação pgcrypto
        run: python scripts/security/check_pgcrypto.py

      - name: pnpm audit (SCA)
        run: pnpm audit:frontend

      - name: Gerar SBOM CycloneDX
        run: |
          mkdir -p sbom
          pnpm sbom:frontend

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-frontend-foundation
          path: sbom/frontend-foundation.json

  ci-outage-guard:
    name: CI Outage Guard
    runs-on: ubuntu-latest
    needs:
      - visual-accessibility
      - performance
      - security
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Compilar scripts TypeScript
        run: pnpm exec tsc -p tsconfig.scripts.json

      - name: Executar política de outage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          CI_OUTAGE_CHROMATIC_JOB_STATUS: ${{ needs.visual-accessibility.result }}
          CI_OUTAGE_CHROMATIC_JOB_NAME: visual-accessibility
          CI_OUTAGE_LIGHTHOUSE_JOB_STATUS: ${{ needs.performance.result }}
          CI_OUTAGE_LIGHTHOUSE_JOB_NAME: performance
          CI_OUTAGE_AXE_JOB_STATUS: ${{ needs.visual-accessibility.result }}
          CI_OUTAGE_AXE_JOB_NAME: visual-accessibility
          FOUNDATION_OTEL_OUTAGE_ENDPOINT: ${{ secrets.FOUNDATION_OTEL_OUTAGE_ENDPOINT }}
          FOUNDATION_DEFAULT_TENANT: tenant-alfa
        run: node scripts/dist/ci/handle-outage.js
