name: Frontend Foundation CI

on:
  pull_request:
    branches:
      - main
      - develop
      - 'feature/**'
  workflow_dispatch: {}

env:
  PNPM_VERSION: 9.12.2
  NODE_VERSION: 20.17.0

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validar tags @SC-00x no PR
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          PR_TITLE=$(jq -r '.pull_request.title' "$GITHUB_EVENT_PATH")
          PR_BODY=$(jq -r '.pull_request.body // \"\"' "$GITHUB_EVENT_PATH")
          if ! printf '%s\n%s\n' "$PR_TITLE" "$PR_BODY" | grep -Eq '@SC-00[1-5]'; then
            echo 'PR precisa mencionar pelo menos uma tag @SC-00x (SC-001..SC-005).'
            exit 1
          fi

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: ESLint (FSD boundaries + Zustand guard)
        run: pnpm lint

  test:
    name: Vitest
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Vitest (coverage gate)
        run: pnpm test:coverage

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry==2.2.1

      - name: Install Python dependencies
        run: poetry install --with dev

      - name: Pytest (coverage gate)
        run: poetry run pytest

      - name: Radon complexity gate
        run: poetry run python scripts/ci/check_python_complexity.py

  contracts:
    name: Contracts (Spectral, OpenAPI Diff, Pact)
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Spectral lint (US1/US2/US3)
        run: pnpm openapi:lint

      - name: OpenAPI diff foundation spec
        run: pnpm openapi:diff

      - name: Pact consumer verification (US1/US2/US3)
        run: pnpm pact:verify

  visual-accessibility:
    name: Visual & Accessibility Gates
    runs-on: ubuntu-latest
    needs: contracts
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Storybook estático
        run: pnpm --filter @iabank/frontend-foundation storybook:build

      - name: Instalar navegadores Playwright
        run: pnpm --filter @iabank/frontend-foundation exec playwright install --with-deps

      - name: Executar Chromatic
        env:
          CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
        run: |
          pnpm chromatic:ci
        working-directory: frontend

      - name: Validar cobertura visual por tenant
        env:
          CHROMATIC_MIN_COVERAGE: '95'
        run: |
          pnpm chromatic:check -- --output chromatic-coverage.json
        working-directory: frontend

      - name: Executar test-runner do Storybook (axe/WCAG)
        run: pnpm --filter @iabank/frontend-foundation storybook:test

      - name: Publicar artefatos Chromatic
        uses: actions/upload-artifact@v4
        with:
          name: chromatic-coverage
          path: |
            frontend/storybook-static
            frontend/chromatic-coverage.json

  performance:
    name: Performance Budgets
    runs-on: ubuntu-latest
    needs: contracts
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Setup k6
        uses: grafana/setup-k6-action@v0.2.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Preparar artefatos de performance
        run: mkdir -p artifacts

      - name: Executar k6 smoke
        run: pnpm perf:smoke:ci
        env:
          FOUNDATION_PERF_BASE_URL: https://example.com
          FOUNDATION_PERF_TENANT: tenant-alfa
          FOUNDATION_PERF_VUS: 1
          FOUNDATION_PERF_DURATION: 10s

      - name: Publicar resultados k6
        uses: actions/upload-artifact@v4
        with:
          name: performance-k6-smoke
          path: artifacts/k6-smoke.json

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: contracts
    if: always()
    env:
      CI_ENFORCE_FULL_SECURITY: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/tags/') }}
      CI_FAIL_OPEN: ${{ github.event_name != 'workflow_dispatch' && github.ref != 'refs/heads/main' && !startsWith(github.ref, 'refs/heads/release/') && !startsWith(github.ref, 'refs/tags/') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry==2.2.1

      - name: Install Python dependencies
        run: poetry install --with dev

      - name: Instalar ferramentas de segurança
        run: |
          poetry run python -m pip install --quiet semgrep==1.94.0 pip-audit==2.7.3 safety==3.3.4

      - name: SAST (Semgrep)
        id: security_sast
        continue-on-error: ${{ env.CI_FAIL_OPEN == 'true' }}
        run: poetry run bash scripts/security/run_sast.sh

      - name: DAST (OWASP ZAP baseline)
        id: security_dast
        continue-on-error: ${{ env.CI_FAIL_OPEN == 'true' }}
        env:
          ZAP_BASELINE_TARGET: http://127.0.0.1:8000/health
        run: poetry run bash scripts/security/run_dast.sh

      - name: Validação pgcrypto
        id: security_pgcrypto
        continue-on-error: ${{ env.CI_FAIL_OPEN == 'true' }}
        run: poetry run python scripts/security/check_pgcrypto.py

      - name: pip-audit (Python SCA)
        id: security_pip_audit
        continue-on-error: ${{ env.CI_FAIL_OPEN == 'true' }}
        run: poetry run bash scripts/security/run_python_sca.sh pip-audit

      - name: Safety (Python SCA)
        id: security_safety
        continue-on-error: ${{ env.CI_FAIL_OPEN == 'true' }}
        run: poetry run bash scripts/security/run_python_sca.sh safety

      - name: pnpm audit (SCA)
        id: security_pnpm_audit
        continue-on-error: ${{ env.CI_FAIL_OPEN == 'true' }}
        run: pnpm audit:frontend

      - name: Gerar SBOM CycloneDX
        id: security_sbom_generate
        continue-on-error: ${{ env.CI_FAIL_OPEN == 'true' }}
        run: |
          mkdir -p sbom
          pnpm sbom:frontend

      - name: Validar SBOM
        id: security_sbom_validate
        continue-on-error: ${{ env.CI_FAIL_OPEN == 'true' }}
        run: poetry run python scripts/security/validate_sbom.py sbom/frontend-foundation.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        if: ${{ steps.security_sbom_generate.outcome == 'success' && steps.security_sbom_validate.outcome == 'success' }}
        with:
          name: sbom-frontend-foundation
          path: sbom/frontend-foundation.json

      - name: Consolidar resultados de segurança
        id: security_summary
        if: always()
        env:
          CI_FAIL_OPEN: ${{ env.CI_FAIL_OPEN }}
          CI_ENFORCE_FULL_SECURITY: ${{ env.CI_ENFORCE_FULL_SECURITY }}
          SAST: ${{ steps.security_sast.outcome }}
          DAST: ${{ steps.security_dast.outcome }}
          PGCRYPTO: ${{ steps.security_pgcrypto.outcome }}
          PIP_AUDIT: ${{ steps.security_pip_audit.outcome }}
          SAFETY: ${{ steps.security_safety.outcome }}
          PNPM_AUDIT: ${{ steps.security_pnpm_audit.outcome }}
          SBOM_GENERATE: ${{ steps.security_sbom_generate.outcome }}
          SBOM_VALIDATE: ${{ steps.security_sbom_validate.outcome }}
        run: |
          python <<'PY'
import os
summary = [
    ("Semgrep (SAST)", os.environ.get("SAST", "skipped")),
    ("OWASP ZAP (DAST)", os.environ.get("DAST", "skipped")),
    ("pgcrypto validation", os.environ.get("PGCRYPTO", "skipped")),
    ("pip-audit", os.environ.get("PIP_AUDIT", "skipped")),
    ("Safety", os.environ.get("SAFETY", "skipped")),
    ("pnpm audit", os.environ.get("PNPM_AUDIT", "skipped")),
    ("SBOM generate", os.environ.get("SBOM_GENERATE", "skipped")),
    ("SBOM validate", os.environ.get("SBOM_VALIDATE", "skipped")),
]

def icon(status: str) -> str:
    status = status.lower()
    if status == "success":
        return "✅"
    if status == "skipped":
        return "⚪"
    if status == "cancelled":
        return "⏹️"
    return "❌"

lines = ["| Check | Status |", "|-------|--------|"]
failures = []
for name, status in summary:
    icon_ = icon(status)
    lines.append(f"| {name} | {icon_} {status} |")
    if status not in {"success", "skipped"}:
        failures.append(name)

with open(os.environ["GITHUB_STEP_SUMMARY"], "a", encoding="utf-8") as handler:
    handler.write("### Resumo dos checks de segurança\\n")
    handler.write("\\n".join(lines))
    handler.write("\\n")
    if failures:
        handler.write("\\nChecks com falha: " + ", ".join(failures) + "\\n")

require_fail_closed = os.environ.get("CI_ENFORCE_FULL_SECURITY", "").lower() == "true"
if require_fail_closed and failures:
    print("Falhas de segurança detectadas em modo fail-closed:", ", ".join(failures))
    raise SystemExit(1)

if failures:
    print("Falhas de segurança detectadas (modo fail-open). Consulte o resumo para detalhes.")
PY

  threat-model-lint:
    name: Threat Model Lint
    runs-on: ubuntu-latest
    needs: security
    env:
      THREAT_MODEL_RELEASE: v1.0
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Validar threat model
        run: python scripts/security/threat_model_lint.py --release "${THREAT_MODEL_RELEASE}"

  ci-outage-guard:
    name: CI Outage Guard
    runs-on: ubuntu-latest
    needs:
      - visual-accessibility
      - performance
      - security
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Compilar scripts TypeScript
        run: pnpm exec tsc -p tsconfig.scripts.json

      - name: Executar política de outage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          CI_OUTAGE_CHROMATIC_JOB_STATUS: ${{ needs.visual-accessibility.result }}
          CI_OUTAGE_CHROMATIC_JOB_NAME: visual-accessibility
          CI_OUTAGE_LIGHTHOUSE_JOB_STATUS: ${{ needs.performance.result }}
          CI_OUTAGE_LIGHTHOUSE_JOB_NAME: performance
          CI_OUTAGE_AXE_JOB_STATUS: ${{ needs.visual-accessibility.result }}
          CI_OUTAGE_AXE_JOB_NAME: visual-accessibility
          FOUNDATION_OTEL_OUTAGE_ENDPOINT: ${{ secrets.FOUNDATION_OTEL_OUTAGE_ENDPOINT }}
          FOUNDATION_DEFAULT_TENANT: tenant-alfa
        run: node scripts/dist/ci/handle-outage.js
